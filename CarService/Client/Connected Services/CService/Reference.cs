//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.CService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CarType", Namespace="http://schemas.datacontract.org/2004/07/CarService")]
    public enum CarType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TruckCar = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PassengerCar = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http//:xxx.com", ConfigurationName="CService.ICarService")]
    public interface ICarService {
        
        // CODEGEN: Контракт генерации сообщений с операцией SetCar не является ни RPC, ни упакованным документом.
        [System.ServiceModel.OperationContractAttribute(Action="http//:xxx.com/ICarService/SetCar", ReplyAction="http//:xxx.com/ICarService/SetCarResponse")]
        Client.CService.SetCarResponse SetCar(Client.CService.CarInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http//:xxx.com/ICarService/SetCar", ReplyAction="http//:xxx.com/ICarService/SetCarResponse")]
        System.Threading.Tasks.Task<Client.CService.SetCarResponse> SetCarAsync(Client.CService.CarInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http//:xxx.com/ICarService/GetCar", ReplyAction="http//:xxx.com/ICarService/GetCarResponse")]
        Client.CService.CarInfo GetCar(Client.CService.CarRequest request);
        
        // CODEGEN: Идет формирование контракта на сообщение, так как операция может иметь много возвращаемых значений.
        [System.ServiceModel.OperationContractAttribute(Action="http//:xxx.com/ICarService/GetCar", ReplyAction="http//:xxx.com/ICarService/GetCarResponse")]
        System.Threading.Tasks.Task<Client.CService.CarInfo> GetCarAsync(Client.CService.CarRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CarInfoWrapper", WrapperNamespace="http://xxx.com", IsWrapped=true)]
    public partial class CarInfo {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xxx.com", Order=0)]
        public double Capacity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xxx.com", Order=1)]
        public int Id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xxx.com", Order=2)]
        public string Model;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xxx.com", Order=3)]
        public int Passengers;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xxx.com", Order=4)]
        public Client.CService.CarType Type;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xxx.com", Order=5)]
        public string Vendor;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xxx.com", Order=6)]
        public int Year;
        
        public CarInfo() {
        }
        
        public CarInfo(double Capacity, int Id, string Model, int Passengers, Client.CService.CarType Type, string Vendor, int Year) {
            this.Capacity = Capacity;
            this.Id = Id;
            this.Model = Model;
            this.Passengers = Passengers;
            this.Type = Type;
            this.Vendor = Vendor;
            this.Year = Year;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class SetCarResponse {
        
        public SetCarResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CarRequestWrapper", WrapperNamespace="http://xxx.com", IsWrapped=true)]
    public partial class CarRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://xxx.com")]
        public string LicenseKey;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://xxx.com", Order=0)]
        public int Id;
        
        public CarRequest() {
        }
        
        public CarRequest(string LicenseKey, int Id) {
            this.LicenseKey = LicenseKey;
            this.Id = Id;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICarServiceChannel : Client.CService.ICarService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CarServiceClient : System.ServiceModel.ClientBase<Client.CService.ICarService>, Client.CService.ICarService {
        
        public CarServiceClient() {
        }
        
        public CarServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CarServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CarServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CarServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.CService.SetCarResponse Client.CService.ICarService.SetCar(Client.CService.CarInfo request) {
            return base.Channel.SetCar(request);
        }
        
        public void SetCar(double Capacity, int Id, string Model, int Passengers, Client.CService.CarType Type, string Vendor, int Year) {
            Client.CService.CarInfo inValue = new Client.CService.CarInfo();
            inValue.Capacity = Capacity;
            inValue.Id = Id;
            inValue.Model = Model;
            inValue.Passengers = Passengers;
            inValue.Type = Type;
            inValue.Vendor = Vendor;
            inValue.Year = Year;
            Client.CService.SetCarResponse retVal = ((Client.CService.ICarService)(this)).SetCar(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Client.CService.SetCarResponse> Client.CService.ICarService.SetCarAsync(Client.CService.CarInfo request) {
            return base.Channel.SetCarAsync(request);
        }
        
        public System.Threading.Tasks.Task<Client.CService.SetCarResponse> SetCarAsync(double Capacity, int Id, string Model, int Passengers, Client.CService.CarType Type, string Vendor, int Year) {
            Client.CService.CarInfo inValue = new Client.CService.CarInfo();
            inValue.Capacity = Capacity;
            inValue.Id = Id;
            inValue.Model = Model;
            inValue.Passengers = Passengers;
            inValue.Type = Type;
            inValue.Vendor = Vendor;
            inValue.Year = Year;
            return ((Client.CService.ICarService)(this)).SetCarAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.CService.CarInfo Client.CService.ICarService.GetCar(Client.CService.CarRequest request) {
            return base.Channel.GetCar(request);
        }
        
        public double GetCar(string LicenseKey, ref int Id, out string Model, out int Passengers, out Client.CService.CarType Type, out string Vendor, out int Year) {
            Client.CService.CarRequest inValue = new Client.CService.CarRequest();
            inValue.LicenseKey = LicenseKey;
            inValue.Id = Id;
            Client.CService.CarInfo retVal = ((Client.CService.ICarService)(this)).GetCar(inValue);
            Id = retVal.Id;
            Model = retVal.Model;
            Passengers = retVal.Passengers;
            Type = retVal.Type;
            Vendor = retVal.Vendor;
            Year = retVal.Year;
            return retVal.Capacity;
        }
        
        public System.Threading.Tasks.Task<Client.CService.CarInfo> GetCarAsync(Client.CService.CarRequest request) {
            return base.Channel.GetCarAsync(request);
        }
    }
}
