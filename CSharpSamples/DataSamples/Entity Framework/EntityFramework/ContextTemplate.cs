//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.EntityClient;
using System.Data.Objects;
using System.Diagnostics.CodeAnalysis;
using EmployeeTracker.Common;
using EmployeeTracker.Model;

namespace EmployeeTracker.EntityFramework
{
    #region Контексты
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [SuppressMessage("Microsoft.Design", "CA1063:ImplementIDisposableCorrectly", Justification = "IDisposable is specified by IEmployeeContext and the implementation is inherited from ObjectContext")]
    public partial class EmployeeEntities : ObjectContext, IEmployeeContext
    {
        #region Конструкторы
        /// <summary>
        /// Инициализирует новый объект EmployeeEntities, используя строку подключения, которая находится в разделе "EmployeeEntities" файла конфигурации приложения.
        /// </summary>
        public EmployeeEntities() : base("name=EmployeeEntities", "EmployeeEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализировать новый объект EmployeeEntities.
        /// </summary>
        public EmployeeEntities(string connectionString) : base(connectionString, "EmployeeEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализировать новый объект EmployeeEntities.
        /// </summary>
        public EmployeeEntities(EntityConnection connection) : base(connection, "EmployeeEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
        #endregion
    	
        #region Разделяемые методы
        partial void OnContextCreated();
        #endregion
    	
        #region IEmployeeContext
    	
    	/// <summary>
        /// Сохранить все ожидающие изменения в контекст данных
        /// </summary>
        public void Save()
        {
            this.SaveChanges();
        }
    	
    	/// <summary>
        /// Проверяет, выполняется ли в этом контексте данных отслеживание предоставленного объекта
        /// </summary>
        /// <param name="obj">Проверяемый объект</param>
        /// <returns>Если объект отслеживается - true, в противном случае - false</returns>
        public bool IsObjectTracked(object entity)
        {
            ObjectStateEntry ose;
            return this.ObjectStateManager.TryGetObjectStateEntry(entity, out ose);
        }
    	
        #endregion
        
        #region Свойства ObjectSet
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public IObjectSet<ContactDetail> ContactDetails
        {
            get
            {
                if ((_ContactDetails == null))
                {
                    _ContactDetails = base.CreateObjectSet<ContactDetail>("ContactDetails");
                }
                return _ContactDetails;
            }
        }
        private ObjectSet<ContactDetail> _ContactDetails;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public IObjectSet<Department> Departments
        {
            get
            {
                if ((_Departments == null))
                {
                    _Departments = base.CreateObjectSet<Department>("Departments");
                }
                return _Departments;
            }
        }
        private ObjectSet<Department> _Departments;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public IObjectSet<Employee> Employees
        {
            get
            {
                if ((_Employees == null))
                {
                    _Employees = base.CreateObjectSet<Employee>("Employees");
                }
                return _Employees;
            }
        }
        private ObjectSet<Employee> _Employees;
    
        #endregion
        #region Методы AddTo
            
        /// <summary>
        /// Нерекомендуемый метод для добавления нового объекта к набору сущностей ContactDetails. Вместо него рекомендуется использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToContactDetails(ContactDetail contactDetail)
        {
            base.AddObject("ContactDetails", contactDetail);
        }
            
        /// <summary>
        /// Нерекомендуемый метод для добавления нового объекта к набору сущностей Departments. Вместо него рекомендуется использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDepartments(Department department)
        {
            base.AddObject("Departments", department);
        }
            
        /// <summary>
        /// Нерекомендуемый метод для добавления нового объекта к набору сущностей Employees. Вместо него рекомендуется использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToEmployees(Employee employee)
        {
            base.AddObject("Employees", employee);
        }
        #endregion
    }
    
    #endregion
}
