<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>Образец приложения Microsoft ADO.NET Entity Framework</title>
    <style type="text/css">
        .style1
        {
            color: Green;
        }
    </style>
</head>
<body>
<p><span class="style1">&#39; © Корпорация Майкрософт (Microsoft Corp.). Все права защищены. </span> <br class="style1" /> <span class="style1">&#39; Данный код выпущен на условиях </span> <br class="style1" /> <span class="style1">&#39; открытой лицензии Майкрософт (MS-PL, <a href="http://opensource.org/licenses/ms-pl.html"> http://opensource.org/licenses/ms-pl.html</a>.)</span></p>
<h1>Образец приложения Microsoft ADO.NET Entity Framework</h1>

<p>
В этом образце демонстрируется приложение WPF, созданное на базе Microsoft ADO.NET Entity Framework. Приложение показывает, как можно использовать Entity Framework в некоторых общих шаблонах разработки для расширения возможностей тестирования и сопровождения кода.
</p>

<p>
В файле кода программной части App.xaml проекта EmployeeTracker имеется флаг useFakes, который определяет, зачем запускается приложение: для работы с Microsoft SQL Server с использованием Entity Framework или для обработки фиктивных компонентов в памяти. Если флаг имеет значение false, приложение проверит MDF-файл, входящий в проект EntityFramework, и присоединит его к локальному экземпляру Microsoft SQL Server Express. Эту связь можно будет изменить в файле App.config проекта EmployeeTracker.
</p>

<p>
Решение состоит из следующих проектов.
</P>

<h2>Model</h2>

<p>
Этот проект содержит бизнес-модель.
</P>

<p>
Объекты Department (отдел) и Employee (сотрудник) содержат встроенную логику, обеспечивающую синхронизацию свойств навигации. Если установить свойство Department в объекте Employee, последний добавляется в коллекцию Employees нового объекта Department и удаляется из коллекции Employees прежнего объекта Department. Аналогичная логика действует при добавлении (удалении) Employee в коллекцию (из коллекции) Employees объекта Department. Тот же корректирующий подход реализован в отношениях объектов Manager/Report (начальник/подчиненный). Подобная логика не нужна при запуске приложения для Entity Framework с использованием прокси отслеживания изменений, поскольку прокси выполняют такую корректировку автоматически, однако для бизнес-модели эта логика имеет критически важное значение и должна действовать при использовании фиктивных компонентов или других механизмов сохраняемости.
</P>

<p>
В абстрактном классе Tests\Model\Entities\FixupTestsBase.cs определен ряд тестов для проверки выполнения корректировки. Это производный класс, предназначенный для применения одних и тех же тестов к следующим версиям бизнес-объектов:
<ul>
<li>Чистые POCO-объекты (базовые классы) – Tests\Model\Entities\BaseModelTypeFixupTests.cs</li>
<li>Прокси EF с привязкой к ObjectContext – Tests\EntityFramework\DetachedProxyFixupTests.cs</li>
<li>Прокси EF без привязки к ObjectContext – Tests\EntityFramework\AttachedProxyFixupTests.cs</li>
</ul>
</P>

<h2>Common</h2>

<p>
Этот проект содержит набор интерфейсов для извлечения и сохранения данных с использованием шаблонов Unit of Work и Repository. Проект включает реализацию некоторых интерфейсов, которые могут повторно использоваться для различных методов доступа к данным. Интерфейс IEmployeeContext представляет базовые функциональные возможности, необходимые для доступа к данным, и реализуется в проектах EntityFramework и Fakes.
</P>

<h2>EntityFramework</h2>

<p>
Этот проект содержит модель EDM (EmployeeModel.edmx), сопоставляющую базу данных (Employee.mdf) с бизнес-объектами, определенными в проекте Model. Здесь же имеется специальный шаблон T4 (ContextTemplate.tt), созданный на основе шаблона по умолчанию, но без функции генерации сущностей, поскольку используются уже определенные бизнес-объекты. Шаблон T4 также добавляет интерфейс IEmployeeContext в генерируемый контекст.
</P>

<p>
Модель EDM включает MDF-функцию, вычисляющую стаж работы сотрудника в данной должности. Репозиторий Employee в проекте Common использует для расчета стажа частный метод, который помечается атрибутом EdmFunction. При применении к Entity Framework вместо этого метода будет использоваться MDF-функция, и расчет будет производиться в базе данных. Метод включает реализацию, используемую при применении к фиктивным компонентам.
</P>

<h2>Fakes</h2>

<p>
Этот проект содержит версии компонентов доступа к данным, размещаемые в памяти; они используются главным образом для тестирования модулей, однако приложение WPF может быть также применено и к этим реализациям. В проект также включается класс для создания экземпляров фиктивного контекста, которые предварительно заполняются набором примеров данных.
</P>

<h2>EmployeeTracker</h2>

<p>
Этот проект представляет интерфейс пользователя, реализованный в WPF с использованием шаблона Model-View-ViewModel. Точка входа в приложение находится в файле кода программной части для App.xaml, в котором формируется единица работы (UnitOfWork) и репозитории. При применении к EF используется заданная в файле App.config строка подключения, контролирующая доступ к базе данных. Если нет доступных локальных экземпляров Microsoft SQL Server Express (.\SQLEXPRESS), это подключение необходимо будет обновить.
</P>

<h2>Tests</h2>

<p>
Этот проект содержит тесты компонентов, включенных в остальные проекты. При тестировании компонентов EF используется строка подключения из App.config. При тестировании база данных не присоединяется, поэтому используется только та часть строки подключения, где определяются разделы метаданных.
</P>
</body>
</html>



